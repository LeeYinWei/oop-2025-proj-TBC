@startuml
left to right direction
skinparam linetype ortho
skinparam packageStyle rectangle
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classAttributeFontSize 11

package "Project" {
    class Main {
        --
        +main()
    }
    class Game {
        +game_state: str
        +status: str
        +selected_level: int
        +completed_levels: set
        +current_budget: int
        +current_bgm_path: str
        +boss_music_active: bool
        +boss_shockwave_played: bool
        --
        +run()
    }
    package "Class1" {
        class Level {
        +enemy_types: list
        +enemy_configs: dict
        +spawned_counts: dict
        +last_spawn_times: dict
        +our_tower: Tower
        +enemy_tower: Tower
        --
        +check_all_limited_spawned(): bool
    }
    }
    

    
package "Class2" {
    together {
        class Tower {
        +x, y, width, height: float
        +hp, max_hp: int
        +is_enemy: bool
        +image
        +shake_start_time, shake_duration: int
        +is_shaking: bool
        +collapsing_start_time: int
        +collapsing_magnitude: int
        +smoke_effects: list<SmokeEffect>
        +physic_effects: list<PhysicEffect>
        +electric_effects: list<ElectricEffect>
        +gas_effects: list<GasEffect>
        +csmoke_effects: list<CSmokeEffect>
        --
        +draw(screen)
        +draw_hp_bar(screen)
        +take_damage(dmg, type)
        +get_rect(): Rect
        +update_smoke_effects()
        +update_physic_effects()
        +update_electric_effects()
        +update_gas_effects()
        +draw_collapse(screen)
    }
        class Cat {
            +x, y, y0: float
            +width, height: float
            +hp, max_hp: int
            +atk: int
            +speed: float
            +attack_range: int
            +attack_interval: int
            +attack_type: str
            +is_aoe: bool
            +is_attacking: bool
            +done_attack: bool
            +slot_index: int
            +kb_limit, kb_count: int
            +kb_threshold: float
            +kb_animation: bool
            +has_retreated: bool
            +anim_state: str
            +anim_progress: float
            +anim_frames: dict
            +frame_durations: dict
            +smoke_effects: list<SmokeEffect>
            +physic_effects: list<PhysicEffect>
            +electric_effects: list<ElectricEffect>
            +gas_effects: list<GasEffect>
            +target_attributes: list
            +immunities: dict
            +boosts: dict
            +status_effects: dict
            --
            +move()
            +knock_back()
            +start_retreat(distance)
            +take_damage(dmg, type)
            +update_animation()
            +get_current_frame()
            +draw(screen)
            +draw_hp_bar(screen)
            +get_attack_zone(): Rect
            +get_rect(): Rect
        }

        class Enemy {
            +x, y, y0: float
            +width, height: int
            +hp, max_hp: int
            +atk: float
            +speed: float
            +attack_range: int
            +attack_interval: int
            +attack_type: str
            +is_aoe: bool
            +is_boss: bool
            +is_b: bool
            +reward: int
            +kb_limit, kb_count: int
            +kb_threshold: float
            +kb_animation: bool
            +anim_state: str
            +anim_progress: float
            +anim_start_time: int
            +anim_frames: dict
            +frame_durations: dict
            +smoke_effects: list<SmokeEffect>
            +physic_effects: list<PhysicEffect>
            +electric_effects: list<ElectricEffect>
            +gas_effects: list<GasEffect>
            +status_effects: dict
            +status_effects_config: dict
            +last_attack_time: int
            +is_attacking: bool
            +done_attack: bool
            +slot_index: int
            --
            +move()
            +knock_back()
            +take_damage(dmg, type)
            +update_animation()
            +get_current_frame()
            +draw(screen)
            +draw_hp_bar(screen)
            +get_attack_zone(): Rect
            +get_rect(): Rect
        }
    }
}
package "Class3" {
    package "Effects" {
    class SmokeEffect {
        +update(): bool
        +draw(screen)
    }
    class CSmokeEffect {
        +update(): bool
        +draw(screen)
    }
    class PhysicEffect {
        +update(): bool
        +draw(screen)
    }
    class ElectricEffect {
        +update(): bool
        +draw(screen)
    }
    class GasEffect {
        +update(): bool
        +draw(screen)
    }
}

package "Other Entities" {
    class Soul {
        +update(): bool
        +draw(screen)
    }

    class Shockwave {
        +draw(screen)
    }
}
}


package "UI Rendering" {
    class UI {
        +render_intro()
        +render_playing()
        +render_ending()
        +render_end()
        +render_pause()
        +render_level_selection()
    }

    note right of UI
    State "intro" → render_intro()\n
    State "playing" → render_playing()\n
    State "ending" → render_ending()\n
    State "end" → render_end()\n
    State "paused" → render_pause()\n
    State "level_selection" → render_level_selection()
    end note
}
    package loaders {
    class ConfigLoader {
        +load_config()
    }

    class ImageLoader {
        +load_images()
    }
}


}





'=============================
' Relations
'=============================
Game --> Class1 : uses
Class1 --> Class2 : manages

Main --> Game : calls

Game --> UI : uses

loaders --> Class2 : provide data
loaders --> Class1 : provide data

Class2 --> Class3 : creates


@enduml